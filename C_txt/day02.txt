cp命令可以复制文件，使用方法如下
cp 路径1 路径2
路径1对应一个已经存在的文件
路径2对应一个还不存在的文件
命令执行完成后路径2所对应的文件被创建出来

mv命令可以把一个文件移动到另外一个地方
mv命令的使用方法和cp命令一样

链接文件用来代表另外一个文件
ln命令用来创建链接文件
ln命令的使用方法和cp，mv命令一样
使用这种方式创建出来的链接文件叫硬链接文件，它们
       可以不依赖原文件而使用

在使用ln命令时如果加上-s选项则创建出来的链接文件
      是软链接
软链接文件不可以独立源文件而使用

程序包含文件系统中的一组文件
计算机在执行程序的时候会从文件中得到数据并根据这些
      数据在内存中创建 一组新数据。这组新数据叫做进程
      （有时候也称它们为程序）

进程中的数据是随着时间变化的
进程不仅仅包含内存中的数据还包含它们的变化过程

ps命令可以查看当前系统中的进程
计算机中为每个进程分配一个整数来代表它，这个整数叫
       进程ID
ps命令使用-aux选项可以查看系统中的所有进程

kill命令可以结束一个进程
kill命令加-9选项可以强制结束一个进程

可以使用ctrl+c组合键结束一个占据终端窗口的进程

可以使用输出重定向把命令本应该显示在终端窗口里
       的内容写入到文件中
在命令中加入(>或者>>)就可以实现输出重定向
使用>表示输出重定向可以把文件中原有内容清除，然后
      把新内容加入
使用>>表示输出重定向可以在原有文件内容后边追加
     新内容

使用通配符可以编写特殊的路径，这种路径可以代表
      多个实际存在的路径
？是一个通配符，它可以用来代表一个任意的字符
*也是一个通配符，它可以用来代表任意个任意字符

管道可以把多个命令连接在一起，前边命令的执行
       结果是后边命令应该处理的数据
只有支持这种使用方式的命令才可以使用管道连接
管道使用命令中的|表示

C语言采用以.c作为扩展名的源文件记录程序内容

C语言程序中可以直接使用加减乘除四则运算符号，
      它们分别用(+,-,*和/)表示

；用来分隔不同的处理步骤，每个用;结束的处理
      步骤叫一条语句
任何C语言程序中都包含大量的语句

C语言中采用分组方式管理语句，每组语句被包含
      在一对大括号中
C语言中语句的分组是多层次的，大组中可以包含
      小组
一组中包含的语句相互之间联系比较紧密，不同组
      的语句之间是基本没什么联系的
C语言中绝大多数语句都必须属于某个分组
语句不可以跨越分组的

所有不属于其他大括号的大括号叫做顶级大括号
每个顶级大括号都应该有名字，不同顶级大括号
      名字不同

C语言中必须有一个顶级大括号叫做main，叫
      这个名字的顶级大括号称为主函数
C语言程序从主函数中的第一条语句开始执行
当主函数中最后一条语句结束后整个程序结束

每个顶级大括号可以在完成所有工作后遗留一个
       数字作为结果，这个数字叫返回值

C语言中规定几十个英文单词作为关键字，每个
       关键字都有特定的作用，不能随意使用
关键字都是由小写字母构成的
return就是一个关键字，它有两个作用。它
      的主作用是结束顶级大括号的执行，辅助
      作用是指定返回值数字。
数字0作为主函数的返回值表示程序正常结束了

C语言中把所有数字分成几组，每组内部的数字之间
       只有数值差别，不同组的数字之间有其他差别
每个组叫做一个数据类型
程序中使用的所有数字除了要指定数值外还需要指定
       类型
程序中所有不带小数点的数字如果没有指定类型则
      计算机会自动指定类型，这个类型叫做整数
      类型
整数类型的英文名称是int

顶级大括号内部的返回值拿到大括号外部后类型可能
      发生变化，所以必须在名称前用类型名称表示
      变化后的类型

绝大多数语言都使用编译器把程序源文件翻译成计算机
      认识的格式
gcc是C语言的编译器
gcc也可以代表一组不同编程语言的编译器

C语言程序的开发步骤
1.使用vi编写程序源文件
2.使用gcc编译器把源文件翻译成计算机认识的格式（编译）
3.使用./a.out命令执行程序

MinGW是Windows操作系统下的gcc

Cygwin是Windows平台上的一个Linux系统

gcc编译过程
1.处理所有预处理指令
2.把源程序编译成计算机认识的格式（编译）
3.把编译得到的不同部分链起来（链接）

预处理指令以#做开头，不是以;做结尾
很多预处理指令用来把源文件里的内容改成另外的
      样子
#include是一个预处理指令，它可以把一个文件
      的内容合并到当前文件中
在#include 预处理指令中可以使用<>或""包含
      文件路径
使用<>包含路径表示路径的起点是系统中的某些
     固定目录
使用""包含路径表示路径的起点包括当前文件所在
     目录

gcc可以使用的选项
-E                只完成预处理工作
-c                只完成前两步的处理工作（预处理，编译）
                   得到以.o作为扩展名的目标文件
-o               可以指定得到的新文件的名称
-std=c89/-std=c99
                   用来指定编译器编译时采用的规范版本
                   默认采用c89规范

注释可以用来向源文件中添加文字信息
编译器在编译的时候会忽略掉所有的注释
以//开头的部分是一种注释，它们只限于一行中，所以
       叫单行注释
以/*做开头，*/做结尾的注释叫多行注释，它们可以
       跨越多行

C语言程序中大量使用名字区分不同东西
所有名字统称为标识符
标识符最好用有意思的英文单词（不可以使用关键字）
标识符的编写规则
1.第一个字母应该是英文字母或下划线
2.以后的可以是英文字母，下划线和阿拉伯数字字符
3.大小写敏感
4.不可以使用关键字
5.标识符长度没有限制（c89规范中截取前31个字符，
     c99规范中截取前63个字符）

C语言书写规范
1.一行中最多包含一条语句
2.不同层次的语句要使用缩进区分开
3.在合适的时候使用空格和空行提高程序的可读性
4.标识符要采用驼峰或下划线方式书写

C语言官方提供一组标准函数，每个标准函数可以用来
      解决一个通用问题
每个标准函数有一个唯一的名字，不同标准函数的名字
      不同
在程序中编写函数调用语句使用标准函数

printf是一个标准函数的名称，这个标准函数可以把程序
      中的数字打印在屏幕上
需要包含stdio.h文件
可以使用占位符打印编写程序时还不知道的数字
一条语句中可以使用多个占位符，每个占位符都必须
       有一个数字和它对应。数字按照从前到后的顺序
     依次替换掉所有的占位符
不同类型的数字应该和不同的占位符配合使用
%d占位符是和整数类型数字配合使用的
\n表示换行字符，它前后的内容应该出现在相邻的两行中

计算机内存中分成很多存储位置，每个存储位置可以用来
       存放一个数字
C语言程序中可以使用一个存储位置表示数字
C语言程序中可以使用变量表示一个存储位置
一个存储位置只能用来存储一种类型的数据（存储位置
      也是分类型的）
变量也是分类型的
变量和存储位置之间的关系完全由计算机决定
程序中使用变量声明语句引入一个变量，这个时候计算机
       为这个变量分配对应的存储位置
变量声明语句中应该包含变量的类型和变量的名称
变量的主要使用方式有两种
1.向变量所代表的存储位置中存放一个数据
2.从变量所代表的存储位置中获得一个数据

赋值语句可以向变量所代表的存储位置中放置数字
赋值语句的核心是赋值操作符（用=表示）
赋值操作符左边的东西必须能代表一个存储位置，
       符合这种要求的东西被称为左值
赋值操作符右边必须是可以当数字使用的东西
  
在程序中直接把变量当数字使用计算机就会先从变量
       代表的存储位置中获得数字然后再进行其他计算

***变量名称在程序中不同地方代表的意思不同

预习：
      1.变量
      2.scanf标准函数
      3.数据类型

作业：
      1.想使用一组砝码表示1克到127克之间任何一个整数
         重量，请找出这组砝码。
         （砝码数量要求尽可能的少，任何两个砝码重量不能
             一样）








