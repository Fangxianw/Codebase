在程序运行过程中根据需要临时分配存储区
    的方式叫动态分配
动态分配的存储区被包含在堆中
使用一组标准函数管理动态分配的存储区
为了使用这组标准函数需要包含stdlib.h
    头文件
malloc标准函数用来分配连续多个字节的
    存储区
这个标准函数把分配好的第一个字节的地址
    作为返回值使用
这个函数的返回值是void*类型的
如果函数失败则会把NULL作为返回值使用

free标准函数用来释放动态分配的存储区
free函数需要分配好的第一个字节的地址
    作为参数
动态分配存储区的生命周期是从malloc函数
    调用时刻开始直到free函数调用时刻
	为止
所有动态分配的存储区一定要在程序结束
    之前使用free函数释放，否则会造成
	内存泄漏
任何动态分配的存储区只能释放一次
free函数会把一次分配的所有动态存储区都
    释放掉

动态内存的分配语句和释放语句很可能
    不在一个地方****
	
使用二级指针做函数形参也可以让调用函数
    使用被调用函数动态分配的存储区（
	和使用一级指针做返回值的效果类似）

calloc标准函数也可以动态分配存储区
这个函数需要两个参数，一个参数表示
     单个存储区的大小，另一个参数
	 表示存储区的个数
这个函数会把分配的每个存储区清0
calloc如果失败也会把NULL作为返回值

realloc标准函数可以调整一段已经分配好
     存储区的大小
这个标准函数如果失败也会把NULL作为返回值
如果这个函数成功会把调整后首地址作为
    返回值

函数指针用来记录函数最开始的地址
函数名称可以代表函数最开始的地址

函数指针是分类型的，函数指针最好和同
    类型的函数捆绑

函数指针一旦和函数捆绑就可以通过这个指针
    调用这个函数

函数指针可以作为参数使用，和这种形参配合
    的实参必须是函数的地址

所有可以作为实参使用的函数叫做回调函数

atoi标准函数可以把字符串中的一个整数
    转换成整数类型
atof标准函数可以把字符串中的一个浮点数
    转换成double类型
为了使用这两个函数需要包含stdlib.h头
    文件
	
sqrt标准函数可以计算一个数字的平方根
需要包含math.h头文件
编译的时候需要使用-lm选项

pow标准函数可以计算一个数字的幂
需要包含math.h头文件
编译的时候需要使用-lm选项

输出缓冲区的管理规则
1.当输出缓冲区里有\n的时候计算机会把
    \n之前的内容打印在屏幕上
2.打印内容的函数结束时也会把打印的内容
    显示在屏幕上
3.如果输出缓冲区满了的时候也会把内容
    显示在屏幕上
4.fflush函数调用语句可以把输出缓冲区
    里的内容显示在屏幕上（使用stdout
	作为参数）
	
sleep函数可以让进程停止一定的秒数，
    秒数由参数决定
为了使用这个函数需要包含unistd.h头文件
休眠的时间有误差

sscanf标准函数可以把一个字符串中多个
   不同类型的数据取出并放在对应的存储区里
fscanf标准函数可以把文件中多个不同
    类型的数据取出并存放在对应的存储区里

sprintf标准函数可以把多个数据按顺序打印
    在字符数组中形成字符串
fprintf函数可以把多个数据按顺序打印在
    文件中

	
	
	
	
	
	
	
	
	
	
	


