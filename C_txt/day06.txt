循环也是一种流程控制语句，它可以让程序中一段语句
       反复执行很多遍
for关键字可以用来编写循环语句

如果在整个循环执行过程中可以找到一组规律变化的数字，
      这时就可以考虑采用for关键字编写循环语句
在编写循环之前首先要声明一个变量，使用这个变量在
     整个循环执行过程中代表那组数字。这个变量叫循环
     变量。
采用如下格式描述循环变量在整个循环中的变化过程
(1;2;3)
其中1,2,3分别代表一条语句
语句1负责把最开始的数字赋值给循环变量
语句2是一条逻辑表达式，描述循环变量和最后数字间的关系
语句3描述循环变量是如何变化的

最后在小括号前边加for关键字，后边加一对大括号，里面
       是希望反复执行的语句组

***可以认为每当循环变量发生一次变化大括号内部的语句
      就执行一次

break;语句可以随时终止整个循环的执行，
     这条语句执行后循环中的一切都
	 不再执行（循环变量也不会再变化）

continue;语句可以直接跳到循环大括号
     的末尾

这两条语句都只能影响直接包含它们的
     循环语句
	
假设有如下的for循环语句
for (1;2;3) {
   4
}
它以如下分组方式执行
[1,2][4,3,2][4,3,2][4,3,2]...[4,3,2]
除了第一组以外所有组都一样
正常情况下循环会在两组之间结束
如果某一组中最后编号为2的语句执行
    结果是真则启动下一组，否则结束
	循环
只要循环正常结束则编号为2的逻辑表
    达式计算结果一定是假
如果循环采用break语句结束则编号为2
    的逻辑表达式计算结果一定是真
使用for关键字编写的循环中大括号里面
     的语句有可能根本就不执行

对于复杂的循环问题可以考虑把所有要
    处理的数字进行分组
为每一组指定一个代表数字
使用一个循环描述所有组代表数字的
    变化过程，内部使用另一个循环
	描述组内部数字的变化过程。
这种代码结构叫循环嵌套
循环嵌套中内部循环的开始数字和结束
    数字很可能需要根据外部循环的
	循环变量计算出来
	  
for循环的多种写法
1. 如果循环大括号中只有一条语句则
      可以省略大括号
2.在小括号中使用，操作符
3.在小括号中临时定义循环变量（
     C99规范中才支持，这种循环
	 变量只有在循环内才有效）
4.小括号中只保留中间的逻辑表达式
5.如果大括号中没有语句则可以直接
     在小括号后加;然后省略大括号
6.把小括号中间的部分省略不写（
      死循环）

while关键字也可以用来编写循环
只要知道循环什么时候应该结束就可以
    使用while关键字编写循环
for关键字和while关键字编写的循环
     完全可以互相替代
while语句编写循环的格式如下
while (布尔值) {
    反复执行的语句
}
当布尔值为真时反复执行大括号里面的
    语句
	  
假设有如下的while语句
while (1) {
    2
}
它实际按照如下的分组方式执行
[1][2,1][2,1][2,1].....[2,1]
除了第一组以外所有组都一样
正常情况下while语句在两组之间结束，
    当某一组最后一步的布尔值结果为
	真时启动下一组，否则结束整个循环
大括号中的语句有可能根本不执行
	  
while关键字也可以用来实现空语句和
    死循环
while语句中也可以使用break;和continue;
     语句

do...while语句也可以用来实现循环，
    这种循环中大括号里面的语句至少
	会执行一次
这种循环语句的格式如下
do {
    反复执行的语句
} while (布尔值);
这种写法也是按照分组方式执行的，
    分组结果就相当于把while分组中
	第一组丢掉。
	  
scanf函数调用语句可以直接当数字
    使用，如果是0表示没有读到
    有效数据。	
	  
goto语句也是一种流程控制语句
goto语句可以决定下一条语句在哪里
不要使用goto语句
	  
预习：
    1.数组（一维数组，二维数组）
	  
作业：
    1.假设一种货币有1元，2元和5元三种
	    面值。编写程序把所有能拼凑
		成10元的可能性都打印在屏幕上
    2.编写一个猜数游戏，让用户反复
	    不停的猜，直到猜对为止。
		（每次用户猜完以后要给出提示）
		（声明一个不初始化的整数变量，
		获得它的绝对值，然后除以100取余
		就得到0到99之间的一个整数）
	  
	  
	  
	  
	  