采用数组可以分配内存中一组连续排列的
     存储位置并使用它们
这些存储位置有前后顺序（地址小的在前，
    地址大的在后）
一个数组只有一个名字
数组中每个存储位置有一个自己的编号，
    不同存储位置编号不同。最前边的
	存储位置编号是0，向后依次递增。
这些编号叫做下标，下标用来区分不同的
     存储位置
有效下标范围从0到个数减一，超过范围的
     下标不可以使用。
一个数组中所有存储位置的类型必须一样
数组也必须先声明再使用

下标是处理数组过程中重要的依据，经常
     需要先处理下标然后通过下标再处理
	 数组中的存储位置

对数组的操作通常使用循环实现，在循环中
    使用循环变量描述下标的变化过程，在
	大括号中对循环变量做下标对应的存储
	位置做处理。

数组也需要初始化
1.初始化数组时需要提供多个数据，每个数据
    用来初始化一个存储位置
2.所有初始化数据应该写在一对大括号中，
    不同数字之间使用,分隔
3.前面的数字用来初始化前面的存储位置，
    后面的数字用来初始化后面的存储位置
4.如果初始化数据个数多于存储位置个数
    则后面多余的数据被丢弃
5.如果初始化数据个数少于存储位置个数则
    后面的存储位置自动初始化成0
6.如果个数一样则可以省略存储位置个数

根据数组找到存储位置的方法也要先通过地址
数组名称代表数组中第一个存储位置的地址
数组名称加下标可以计算出下标对应存储
     位置的地址

数组名称不代表存储位置，所以不可以被赋值

对数组名称进行sizeof计算得到整个数组的大小

数组声明语句执行后其中存储位置的个数
    就不可改变了

变长数组中存储位置的个数在编写完程序后
    是不确定的（但在执行过数组声明语句
	以后必须确定）
C99规范中才支持变长数组
变长数组不可以初始化

在编写程序时无法确定数值的数字叫随机数
计算机中使用的随机数通常是伪随机数，只要
    知道的信息足够多是可以预测的

rand标准函数可以获得伪随机数
直接把函数调用语句当数字使用就可以获得
    伪随机数了
为了使用这个标准函数需要包含stdlib.h
    文件

srand标准函数用来设置随机数种子
可以把任何一个整数作为种子使用
这个函数同样需要包含stdlib.h文件

time标准函数可以获得0时区从1970-01-01
    0时0分0秒到现在所经过的秒数
为了使用这个标准函数需要包含time.h文件

任何程序中srand标准函数应该只执行一次

一维数组只有一个下标，二维数组有两个下标
它们是两种使用内存中连续存储位置的方法
二维数组中第一个下标用来表示某个分组，
    可以把这个下标叫做组下标。组下标的
	范围是从0到组的个数减一。
二维数组中第二个下标用来表示分组中某个
    存储位置

通常采用循环嵌套结构对二维数组中所有
    存储位置依次进行处理

二维数组可以被当成一个一维数组进行初始化
    也可以当成多个一维数组进行初始化

如果根据初始化数据的个数可以计算出组的
     个数则可以在声明二维数组的时候
	 省略组的个数

二维数组名称也代表第一个存储位置的地址，
    但它和一维数组名称的类型不同

在sizeof计算中二维数组名称代表整个二维
    数组，计算结果是二维数组中所有存储
	位置的大小

一维数组名称和二维数组名称类型不同，它们
    可以互相转换
对一维数组名称进行取地址操作结果的类型
    就是二维数组名称，但数值没有改变
转换后的二维数组中只有一组数据，其中
    包括原来一维数组中的所有存储位置。
二维数组名称加一个下标就可以转换成
    一个一维数组，这个一维数据就是
	二维数组中的某一组存储位置。

预习：
    1.做练习

作业：
    1.身份证前17个数字依次和下面的
	17个数字对应相乘（7,9,10,5,8,
	4,2,1,6,3,7,9,10,5,8,4,2）,把
	所有乘积求和。用求和结果除以11
	取余，根据余数从下面11个数字中
	查找身份证最后一位的数字。（1,0,
	X,9,8,7,6,5,4,3,2）
	  编写程序验证一个给定的身份证号码
	是否真实




	
	