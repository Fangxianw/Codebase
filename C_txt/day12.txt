指针变量也可以作为函数的返回值使用
指针变量做返回值可以表示一个存储区而
    不仅仅是数字
绝不可以把和局部存储区捆绑的指针作为
    返回值使用

指针变量支持如下计算规则
指针 + 整数， 指针 - 整数, 指针 - 指针
当指针和整数进行加减计算时整数是有单位的。
    整数1代表的不是一个字节而是一个捆绑
    存储区的大小
指针之间减法的结果是一个整数，这个整数
    也是有单位的。一个整数代表的也是一个
	捆绑存储区的大小。
	
指针和数组中第一个存储区捆绑后可以代替
    数组名称（因为它们遵循同样的计算规则）
数组名称和指针的差异
1.数组名称不可以被赋值，指针可以被赋值
2.进行sizeof计算的结果不同（指针变量
    的大小就是它自身存储区的大小和捆绑
	存储区没有关系）
3.数组名称取地址后的结果数值和数组名称
    本身的数值一样。指针变量取地址后
	数值和指针变量本身记录的数值不同。

可以使用指针变量做循环变量依次处理数组
     中所有存储区

使用const关键字声明指针变量有两种方式
方式一如下
const int *p_num = &num;
这种指针捆绑存储区不可以被赋值，但指针
    本身存储区可以被赋值
不可以通过指针对捆绑存储区赋值
方式二如下
int * const p_num = &num;
这种指针本身存储区不可以被赋值，但捆绑
    存储区可以被赋值
这种指针只能在初始化的时候赋值

如果一个函数有一个指针类型的形参而且
    函数不会修改捆绑存储区中的内容就
	应该使用第一种方式声明指针形参
	
C语言中所有文字信息都是用一组连续的字符
    类型存储区表示的
所有文字信息的最后应该使用字符'\0'表示
    结尾。这个字符的ASCII码就是数字0.

所有连续的字符类型存储区都可以使用一个
    char*类型的指针表示（指针必须和第一个
	存储区捆绑）	
包含'\0'的连续字符类型存储区叫做字符串
所有字符串都可以使用一个字符类型指针表示

字符串字面值是程序中两个双引号中间的
    一组字符，例如"abc","&*^^"
编译器会自动在字符串字面值最后加'\0'字符
编译器会自动把字符串字面值替换成第一个
    字符类型存储区的地址
字符串字面值的所有存储区都存放在一个
    不可以修改的段落中
同样内容的字符串字面值在程序运行过程中
    永远只有一份
编译器会把两个并列的字符串字面值合并
    成一个
	
字符数组也可以用来表示字符串（只有
    包含'\0'字符的字符数组才可以当成
	字符串使用）
编译器不会自动给字符数组加'\0'字符
可以采用字符串字面值给字符数组做初始化，
    这时字符串字面值最后的'\0'字符被
	加入到字符数组中
使用字符串字面值对字符数组初始化之后
    它们各自占据自己的存储区。

不可以使用操作符对字符串进行操作
C语言中提供了对字符串进行各种处理的
    标准函数
为了使用这些标准函数需要包含string.h
    文件
strlen       用来计算一个字符串中有效
             字符的个数
strcat       用来把一个字符串合并到
             一个字符数组中原有字符串
			 的后面
			 返回值是合并后字符数组的
			 首地址
	         这个函数有可能导致使用了
			 超过数组范围的存储区
strncat      功能和strcat一样
             多了一个参数用来表示最多
			 可以把多少个字符合并到字
			 符数组中的
			 这个函数可以避免使用超过
			 范围的存储区
strcmp       用来比较两个字符串内容的
             大小
			 把两个字符串中对应位置的
			 字符数据进行比较，ASCII码
			 大的字符串就大，否则就小
	         需要两个字符串作为参数，
			 函数不会修改任何一个参数
			 的内容
			 使用返回值表示比较结果，
			 返回值0表示一样大，返回值
			 1表示前一个字符串大，返回值
			 -1表示后一个字符串大
strncmp      只比较两个字符串中前n个字符，
             n由参数表示
strcpy       用来把一个字符串中所有字符
             数据拷贝到一个字符数组中
			 使用返回值表示拷贝得到的
			 新字符串首地址（就是原来
			 字符数组的首地址）
	         这个函数可能造成使用超过
			 数组范围的存储区
strncpy      功能和strcpy类似，只是拷贝
             字符串中前n个字符，n是函数
			 的参数
	
使用scanf函数可以从键盘上得到一个字符串
    中的所有字符（使用%s做占位符）
使用scanf从键盘得到字符串内容是不安全的，
    有可能超过字符数组的范围

fgets函数可以从任何一个文件中得到一个
    字符串
在Linux系统中所有东西都可以看成是文件，
    所以函数fgets可以从任何地方得到
	字符串
一个程序运行时有几个固定文件可以使用，
    其中一个文件叫标准输入文件，使用
	stdin表示。大多数情况下标准输入
	文件就是键盘。
fgets函数需要三个参数
1.参数一是一个字符类型存储区的地址，
    把从键盘得到的所有字符数据保存
	在这个地址开始的多个字符型存储区中
2.参数二表示从参数一的地址开始有多少
    个可以使用的字符类型存储区
3.要读取的文件（stdin表示标准输入文件）

这个函数不会使用超过数组范围的存储区

这个函数可能把用户最后输入的换行字符
    也读入到字符数组中
	
这个函数有可能在输入缓冲区中留下垃圾
    数据，所以在读完字符串后要考虑
	清理输入缓冲区

预习：
    1.指针数组（主函数参数）
	2.文件位置指针
	3.预处理指令
	
作业：
    1.修改前边编写的人员信息管理系统，
	    给每个人员增加姓名这项数据。
    2.编写mystrcat函数实现strcat函数
	    的功能




	
	
	