不同类型的数据支持不同的处理方法
不同类型的数据采用同样的方法处理得到的结果可能不同

%nd也可以作为占位符打印整数，其中n代表一个数字。
       这种占位符要求打印结果在屏幕上一定占n个位置
%-nd做占位符要求有效数字出现在n个位置的左边
%0nd做占位符打印时空出来的位置填字符0
%n.mf做占位符可以打印浮点数据，整个打印结果一共
       占n个位置，其中小数点后面的部分占m个位置

计算机内存由大量的字节构成，任何两个字节都是类似的。
      任何一个存储位置一定是由多个相邻的字节合并形成的

计算机内存中每个字节有一个独立的地址，这些地址是
      连续排列的
存储位置的地址是构成它的所有字节中最小的地址

不同整数类型之间的区别主要是由它们所包含的字节个数
       不同造成的
      
char(unsigned char)                   一个字节
short(unsigned short)               两个字节
int(unsigned int)                        四个字节
long(unsigned long)                  四个字节

float                                              四个字节
double                                          八个字节

sizeof关键字可以用来获得一个数据类型或一个变量所占
      的字节个数
sizeof关键字可以用来计算一个公式结果的大小
sizeof关键字中对变量内容做的任何修改都不会真正发生

使用一组0和1表示数字的方式叫二进制（可以把二进制
        数字表示方式看成一幅画）
计算机内部就采用二进制的方式表示数字
数字的二进制表示方式中每个数位上不是0就是1，所以
       叫二进制

二进制和十进制只是同样数字的不同表示方式，任何数字
       既可以采用二进制方式表示也可以采用十进制方式
       表示

数字的二进制表示方式中每个数位有一个编号，最右边
      的编号是0，向左依次递增
二进制表示方式中每个数位上的1单独对应一个数字，
      这个数字的数值是2的位数次方
二进制表示方式中两个相邻的1之间有倍数关系，左边的
       1是右边1的两倍

二进制到十进制的转换
把二进制表示方式中所有的1对应的数字找出来然后求和
      就得到整个二进制表示方式所对应的十进制表示方式

0110 1010         二进制表示方式
7654 3210         数位编号

2^6 + 2^5 + 2^3 + 2^1 = 64 + 32 + 8 + 2 = 106

十进制转换二进制的方法
1.首先把十进制数字拆分成几个二进制整数次方之和，
          然后把每个拆分结果转换成二进制某个数位
         上的1，把其他数位补充0

77 =   64 + 8 + 4 + 1 = 2^6 + 2^3 + 2^2 + 2^0
      =  0100 1101

2.除以2取余倒着写

91                             **** ***1
45                             0*** ***1
22                             00** ***0
11                             000* ***1
  5                             0000 ***1
  2                             0000 0**0
  1                             0000 00*1
  0                             0000 0000

0101 1011

采用上述方法计算得到的二进制表示方式叫原码
计算机内部采用补码方式记录数字
非负数的原码和补码一样

一个字节中可以记录八个二进制数位

八进制和十六进制是二进制的简写方式
把一个二进制表示方式从右向左每三个数位分成一组，
       每组用一个0到7之间的数字替代得到的结果就是
      数字的八进制表示方式

二进制表示方式                                        八进制表示方式
0110 1101                01 101 101          155         

可以在程序中直接使用八进制方式表示数字，要求前边
       加一个0避免和十进制混淆
%o做占位符可以把一个整数的八进制表示形式打印在
       屏幕上

把二进制表示形式从右向左每四个数位分成一组，每组
      用一个数字表示得到的结果就是十六进制表示方式
      （使用'a'到'f'代表10到15这六个数字）

在程序中可以直接使用十六进制表示数字，必须在前边加
      0x做开头，避免和其他进制混淆
使用%x或%X做占位符可以把一个整数的十六进制表示
      形式打印在屏幕上（%x打印的字母都是小写的，%X
      打印的字母都是大写的）

二进制加一的规则是把从右向左连续多个1变成0，把遇到
      的第一个0变成1
负数二进制表示方式的计算规则
1.首先得到相反的非负数的二进制
2.把上一步的结果中每个数位变成相反数值（0变1，1表0）
3.把上一步的结果加一

用以上方法计算得出的二进制表示方式就是负数的二进制
      补码
-41
第一步
41  =    32 + 8 + 1 = 2^5 + 2^3 + 2^0
      = 0010 1001
第二步
1101 0110
第三步
1101 0111

每个有符号数据类型中有一个特殊的二进制表示形式（最左边
      的二进制数位是1，右边的所有数位都是0），这个
      二进制形式表示这个数据类型中的最小整数

采用前面介绍的方法可以根据任何一个整数的二进制计算
       出相反数的二进制（不论已知的二进制是正还是负）

有符号数据的二进制表示形式中最左边的数位叫做符号位。
      如果符号位是0表示数字是正的，否则表示数字是负的
无符号数据没有符号位
符号位不等同于正负号

把一个代表整数的数字赋值给一个代表整数类型的变量时
       会保持二进制内容不变（十进制结果会改变）

有符号数据左边扩充二进制数位时每个扩充出来的数位
       上都填充符号位

C语言中可以使用加减乘除（+,-,*和/）这些四则运算符号
%表示取余操作

，也是一个可以使用的操作符，它可以把两个无关的
       表达式合并在一起形成一个新的表达式
使用,连接形成的表达式计算结果是最后一个表达式的计算
     结果
，操作符的优先级比赋值操作符还低

赋值操作符（=）可以用来给一个存储位置赋值
赋值操作符左边的内容必须可以代表一个存储位置（左值）
赋值操作符右边的内容必须可以当数字使用
赋值操作符的优先级比大多数操作符都低
可以在一条语句中写多个赋值操作符，优先计算右边的
       赋值操作符

只需要一个数字就可以配合使用的操作符叫单目操作符
需要两个数字配合使用的操作符叫双目操作符
需要三个数字配合使用的操作符叫三目操作符

绝大多数双目操作符都可以和赋值操作符合并形成复合
      赋值操作符（例如+=,%=等）
复合赋值操作符也是双目操作符，左右各需要一个数字
首先把左右两个数字进行处理，然后把结果记录在左边
      的存储位置里
所有复合赋值操作符的优先级都和赋值操作符一样低

自增(++)和自减(--)操作符可以用来对存储位置里边的
       内容做加一或减一操作
这两个操作符都需要一个存储位置类配合使用
它们都是单目操作符
它们都可以采用前操作和后操作两种使用方式
前操作的优先级非常高，后操作的优先级非常低
不要在一条语句中对同一个变量做多次自增或自减计算，
      结果不确定

预习：
      1.操作符（逻辑操作符，位操作符，三目操作符...）

作业：
      1.编写程序把一个用户给定的1到127之间的整数
           转换成二进制表示形式，并把转换结果打印在
           屏幕上（采用两种方法各实现一遍）







