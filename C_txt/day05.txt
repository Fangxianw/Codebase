布尔值包括真（true）和假(false)两个
计算机内部使用1表示真，0表示假
C语言中可以把任何一个整数当布尔值使用，整数0当作
      布尔值使用时是假，其他整数当布尔值使用时是真

逻辑表达式的计算结果只能是布尔值（或者是真，或者
       是假）
逻辑表达式需要使用逻辑操作符编写
双目逻辑操作符包括==(相等)，!=(不等)，>(大于),
        <（小于）,>=(大于等于)和<=(小于等于)

！是一个单目逻辑操作符。它可以写在一个布尔值的左边，
       它可以把原来的布尔值变成相反值

前面介绍的双目逻辑操作符只能用来编写简单逻辑表达式，
    （只包含一个双目逻辑操作符的逻辑表达式）

多个逻辑表达式可以采用与(&&)和或(||)连接
采用与(&&)连接的多个逻辑表达式只有当所有简单逻辑
       表达式的结果都是真的时候合并后的复杂表达式结果
       才是真，否则就是假
采用或（||）连接的多个逻辑表达式只要有一个简单逻辑
      表达式的结果是真则合并后的表达式结果就是真，否则
      是假

与(&&)和或(||)这两个逻辑操作符都具有短路特性，如果
      前一个表达式的结果可以决定整个表达式的结果则
      后一个表达式不会计算

逻辑操作符的优先级低于算数操作符

位操作符直接操作二进制数位
双目位操作符包括按位与(&)，按位或(|)和按位异或(^)
双目位操作符先把两个参与计算数字的二进制表示方式
      写出来，然后让它们对应数位之间进行计算

按位与(&)把对应数位上的数字做与计算
       0   &    0                   0
       0   &    1                   0
       1   &    1                   1

       3              0000 0011
&    5              0000 0101
                       0000 0001

按位与可以把某些二进制数位清0
某个数位和0做按位与结果一定是0，和1做按位与
       结果不变

按位或(|)把对应数位上的数字做或计算
        0   |   0                 0
        1   |   0                 1
        1   |   1                 1

        3                   0000 0011
|       5                   0000 0101
                              0000 0111

按位或可以把某些二进制数位置1
任何数位和1做按位或计算结果是1，和0做按位或计算
       结果不变

按位异或（^）把对应数位上的数字做异或计算
       0   ^   0                 0
       0   ^   1                 1
       1   ^   1                 0

       3                      0000 0011
^    5                      0000 0101
                               0000 0110

按位异或可以把某些二进制数位上的数字求反
任何数位和1做异或结果变成相反数值，和0做异或
       结果不变

~是一个单目位操作符，它可以对一个数字的每个二进制
      数位求反

可以对字节中的所有二进制数位向左或向右移动n个位置
为了实现上面的效果需要使用移位操作符
<<表示向左移位
>>表示向右移位
它们都是双目操作符，需要左右各有一个数字。左边的数字
       要进行移位操作，右边的数字表示移动的位数
它们不会改变左边数字的内容

如果在移位过程中没有丢失有效数位，则左移n位相当于
      乘以2的n次方，右移n位相当于除以2的n次方

左移时右边的空位置上一定补0
无符号类型整数右移时左边的空位置一定补0，有符号类型
      整数右移时左边的空位置一定补符号位

&操作符可以根据一个变量或存储位置获得地址数据

*操作符可以根据一个地址获得对应的存储位置

三目操作符可以根据一个布尔值从两个不同的表达式
       中选择一个进行计算
三目操作符的使用方法如下
布尔值   ?    表达式1  ： 表达式2
布尔值为真是采用前面的表达式，否则采用后面的表达式

当一个表达式中多个数据的类型不一致的时候计算机会首先
       把它们转换成同一个类型，然后再进行计算。
这个转换过程由计算机自动完成，叫做隐式类型转换

隐式类型转换过程中会把char和short类型数据转换成
       整数类型
如果既有整数类型数据又有浮点类型数据则会把整数类型
       转换成浮点类型
如果所有数据的类型不同但是所占空间大小一样，则把
      整数转换成单精度浮点数，有符号数转换成无符号数

C语言程序中可以随时给任何数据指定类型，因此C语言是
      弱类型语言
给数据指定类型的做法叫强制类型转换
强制类型转换不受规则约束，有可能出错
在强制类型转换时计算机会生成一个新数据，然后用旧
       数据对新数据做初始化
强制类型转换不会改变旧数据

流程控制语句可以让程序中的语句不再从上到下顺序执行

分支是一种流程控制语句，它可以从几组语句中挑选出一组
       执行而忽略其他组
if关键字可以用来编写分支语句
在if语句中为每组语句编写一个逻辑表达式，逻辑表达式
      结果为真时执行这组语句，否则不执行

如果多个分组在任何时候最多只会执行其中一个可以使用
      else关键字把它们合并

如果合并后的多个分组不可能都不执行则可以把最后
      一个分组的逻辑表达式省略

switch...case语句也可以用来实现分支
每段处理语句的结尾都应该用break;结束

预习：
      1.循环（for，循环嵌套，while,do...while等）

作业：
      1.编写程序根据用户给定的年和月计算当月的天数
           如果年份可以被4整除但不能被100整除则是闰年
           如果年份可以被400整除则是闰年





