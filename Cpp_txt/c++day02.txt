一.内联函数
     1.1  可以把函数的二进制代码 直接复制到调用位置 
             这样减少开栈 和 清理栈的开销 。
     1.2  如何实现
            #define  GETMAX(X,Y)   (((X)>(Y))?(X):(Y))
            inline int  getmax(int x,int y){
                   return  x>y?x:y;
            }
     1.3 小函数  频率调用 适合内联 
           大函数  稀少调用 不适合内联
           递归函数   不能内联
           inline  只是一种请求 请求成功就是按照内联方式调用
                请求不成功 就按照普通函数调用。 
二.参数哑元
    2.1 如果一个参数  只有类型 没有参数名 则叫哑元。
    2.2 作用
          让参数列表 匹配更加严格
          保持函数的向前兼容
                void  encode(int pkey);
                void  decode(int skey);
                void  decode(int);  // 新函数 
          区分函数
                前++
                operator++(); 
                后++
                operator++(int);  
三.函数参数的默认值
    3.1  如果一个函数的参数 设定了默认值  则调用这个函数时
           这个参数可以
 不传值 这时使用的值是默认值。如果对
           这个参数 传入值 则传入的值会替代掉默认值。
    3.2  语法
           void  foo(int a=1,int b=2,int c=0);
           参数的默认值 必须靠右 
           函数声明 和 实现分开时 默认值在声明时指定  
    3.3  举例
    设计一个函数  打印一个整数数组   默认打印整数数组的前
    5个数据。数据分隔符号默认使用逗号。
    void    printArr(int *data,int size=5,char c=',');
    
 四. c++ 中动态内存分配 
     new                       delete
     类型   *指针名 = new 类型;
     int     *pi   = new  int;
     int     *pi2 = new int(100);
     
     /* 申请多个对象的空间 */
     new[]                    delete[]
     类型   *parr = new 类型 [n];
       
     char   data[100];
     /*  定位内存分配 */
     int     *pa = new (data) int [25];
     
五. c++ 中的引用
     5.1 引用就是别名
           9527   华安     唐伯虎    唐寅 
           机器猫    叮当    哆啦A梦 
     5.2  语法
           int      var_x=9527;
           /* rvar_x 就是变量  var_x 的别名 
               定义引用时必须初始化 
               引用一旦初始化 则终生为这个变量服务 */           
           int&   rvar_x=var_x; 
     5.3 引用的简单实现
           类型  *const   指针名;
           /* 常引用 */
           const  int&   rx=100;         
     5.4 引用的应用 
           函数的参数
                 引用传递  vs  值传递
                 减少拷贝
                 在函数内部 修改函数外部的数据
           函数的返回值
                 函数的返回值 只能作为右值，不能作为左值。
                 如果希望函数的返回值可以做左值 可以使用引用类型。        5.5 列出指针和引用的联系 和 区别?（思考）
            
 六. c++ 中的类型转换运算符
      static_cast<类型>(变量)
            在某一个方向上 可以做隐式类型转换
            int    * pi;         
            void  *pv=pi;
      dynamic_cast<类型>(变量)
            适合具有多态性的父子类 之间

      const_cast<类型>(变量)    
            去掉const修饰的
             
      reinterpret_cast<类型>(变量)
            重新解释内存  最接近c的强制类型转换
            整数变成指针
            指针变成整数 
七. c++ 之父给c程序员建议
     尽量少使用宏   可以使用枚举 和 const 定义常量
            用inline  替代掉带参的宏 
            使用namespace  避免命名冲突
     变量随时用随时定义  以保证变量的初始化
            for(int i=0;i<5;i++){   }      
     尽量避免强制类型转换  如果要进行类型转换  尽量使用
            提供的四个转换运算符。
     多用 new  delete  少于 malloc  free 
             new[]  delete[]
     少使用 c风格字符串  多使用 string类型
     逐渐建立面向对象的编程思想。
                 
                                  面向对象编程
一.什么是对象
    万物皆对象 
    程序就是由一组对象 组成的，对象和对象通过发消息
          通知做什么。
    对象是由其它类型的对象组成的存储区。
    每一个对象 都有一个特定的类型。
    同类型的对象 都能接收相同的消息。
    oc    a.show()    [a  show]  
二.类型 
   具体     ---------     抽象
   
   猫   -------抽象  ------- tom  猫
                  ( 特征 )          tom猫的类型          
                   眼睛               
                   耳朵
                   爪子    
                  （行为）
                   喝牛奶
                   重复你说的话
                   抓屏幕 
  汽车 -------抽象   --------- 
                   (销售)
                   (维修)                     

 抽取核心特征    和    核心功能 

三.如何表达抽取的类型
   具有共同特征的对象 都有公同的 类别
   类型是类别是抽象的  对象是类型创建的具体变量 
  
   刻画类型 就是抽取共同特征 和 行为
   Student 这个类型的特征 和 行为
   特征:
          string    name;
          string    sno;
          int         score;
   行为:
          void   learn(string  par);
          void   eat(string  par);     
四 如何在计算机中描述这个类型
    使用结构体 对类型进行描述
          抽象一个时间类 
          特征:
                时  分  秒
          功能:
                显示时间
                走一秒 
                运行 
          09：20：28  
                
    使用类对类型进行描述









