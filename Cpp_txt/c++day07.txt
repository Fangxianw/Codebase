一.继承 之后 父类数据 到子类之后的权限变化
   以及权限变化之后 对数据权限突破
   
   公开外部接口
   友元函数
   友元类(在哪个类中声明友元类 就获得对这类的私有成员的
   访问权限)
 
二.继承中 构造函数 和 析构函数的调用顺序
   构造函数 和 析构函数是不能被继承的 但可以调用。
   子类一定会调用 父类的构造函数。
   子类默认调用父类的无参构造 也可以指定调用构造函数。
   析构函数的调用 和 构造的调用顺序相反。   

三.拷贝构造函数  和 赋值运算符函数 
   拷贝构造函数 和 赋值运算符函数 也不能被继承
   但在子类不提供拷贝构造 和 赋值运算符函数时 子类
   默认调用父类的拷贝构造 和 赋值运算符函数。
   但子类一旦提供拷贝构造 和 赋值运算符 则不再调用
   父类的拷贝构造 和赋值运算符。
   
   拷贝构造函数 在初始化参数列表中调用即可。
   赋值运算符函数 需要使用类名::
       A::operator=(b);
       
四.名字隐藏机制(name hide)
   4.1 子类中 如果定义了 和父类中同名的数据,则会把父类
   中的数据隐藏掉。
   4.2 举例
   名字隐藏时  对函数的返回值  和 参数列表没有限制
   但 函数设计了参数 对调用会有歧义 调用时应该传参。
   需要父类的数据 需要在数据前加类名:: 。
   
五.多继承
   5.1 一个类 可以有多个直接父类。
   5.2 举例
   Phone        Mp3         Camera
                
       
               IPhone
                     
   构造函数的调用顺序  和 继承的顺序有关 和其它任何
   情况都无关。析构函数调用的顺序和构造函数顺序相反。
   
   子类可以调用父类不重名的数据,重名的数据可以通过
   类名作用域区分,也可以使用名字隐藏机制解决。
    
   5.3 把父类公共的数据部分 抽象到更高层的类中
      class Product{
      double  price;
      public: 
      double  getPrice(){ } 
      };
   5.4 钻石继承 和 菱形继承
      一个类有多个子类  而这多个子类 又有公共的
      子类 就会形成钻石继承。
      钻石继承 会让底层的类复制底层类多份数据。
      为了解决这个问题 ----- 虚继承(virtual )
 
六.虚函数
   6.1 概念
   如果在一个成员函数上 加了 virtual 修饰之后 则
   这个函数成为虚函数。
   6.2 举例
   一个类型 只要出现虚函数 则会有一个指针维护
   这些虚函数。

七.函数重写( over write)
   在父类出现一个虚函数,如果在子类中提供 和 父类
   同名的虚函数 这叫函数重写。
   函数重写 要求 必须有相同的函数名 相同的参数列表
   相同的返回值。 
 
 八.多态
    8.1 概念
    一个父类型的对象的指针或者引用  指向(引用) 一个
    子类对象时,调用父类型中的虚函数,如果子类覆盖了
    这个虚函数 则调用的表现是子类覆盖之后的。
    
    继承是构成多态的基础
    虚函数是构成多态的关键
    函数覆盖是必备条件
    
    overload  同一作用域函数名相同 参数列表不同
    overwrite 父子类之间 子类提供了和父类同名的虚函数
    name hide 父子类之间 子类提供了和父类同名的数据
    8.2 多态的应用
    函数的参数 
    
    函数的返回值
        
    8.3 多态的原理
    虚函数    成员函数加了 virtual 
    虚函数表指针  一个类型有虚函数 则对这个类型提供一个
        指针这个指针放在生成的对象的前四个字节。
        同类型的对象 共享一张虚函数表,并且不同类型
        的虚函数表地址不同。 
    虚函数表：虚函数表中的每个元素都是虚函数的地址。
    
   
   
   
   
                    