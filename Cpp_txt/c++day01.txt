一.c++ 发展的历史
    80 贝尔实验室  本贾尼
    83 年 正式命名c++
    87 gnu 制定了 c++标准
    92 微软  和 IBM 分别指定了c++标准 
    98 ansi   ISO  制定了c++ 标准  c++98
    03 ISO     c++03
    11 ISO     c++0x  

    gcc   ***.c   -std=c99 

二.c 和 c++ 关系 
   c是建立c++ 的基础   c++ 包含了整个了c
   c++对类型检查更加严格 
   c++ 扩展了 c
         c++ 提供了面向对象的编程机制 (以类的方式组织代码)
         运算符重载(一种函数特殊表现形式)
         异常处理机制（新的错误处理方式） 
         泛型 和 模版(STL)   （类型通用编程）
三.第一个c++程序 
    3.1 头文件
    标准c++ 头文件 不再以.h结尾 
    /usr/include/c++/4.6/   
    #include <iostream>
    可以使用c的头文件
          标准c头文件 建议 去尾加头的方式去使用
          #include <stdio.h>  ------ #include <cstdio>
          #include <string.h> ------ #include <cstring>
          非标准c头文件 
          #include <pthread.h>
   3.2 源文件 
         建议使用 .cpp 结尾 
         可以是 .c   .C  .cc  .c++  .cxx        
   3.3 输入输出
         使用 #include <iostream>
         cout <<
         int   age; 
         cin  >> age;
         scanf("%d",&age);
         自动处理格式     
   3.4 编译器
         建议使用  g++ 
         如果使用  gcc    需要加一个链接库  -lstdc++
         g++ 的编译选项 和 gcc  相同
              -c     编译
              -o     输出名
              -On  优化
              -S     生成汇编
              -E     预处理
              -I      指定头文件的位置
              -L     指定库的位置
              -l       指定库名
              -std   指定编译标准
              -g      生成调试信息  
    3.5  using   namespace  std;
           使用标准的命名（名字）空间 std

四.命名空间 
    4.1 就是把一组 逻辑上相关的数据组织到一起的逻辑名。
          便于模块化
          防止命名冲突
    4.2 语法
          namespace   空间名{
                 // 数据 
                 int   age;
                 void  foo(){

                 } 
          }
   4.3   如何使用命名空间 
        在数据前 加命名空间名:: 即可
        使用using  声明
              using  空间名::数据名; 
        使用 using namespace 指令
              using  namespace 空间名;
   4.4  无名命名空间
        如果一个数据 没有定义在任何命名空间 则这个数据属于
        无名命名空间。
        namespace {
                 // 防止跨文件访问
                 int  age=123;
        }     
        ::数据;
   4.5  命名空间嵌套 
      namespace  ns1{
             int   a=1;
             namespace ns2{
                    int  a=2;
                    void   show(){
                           cout << a << endl;
                    }
                    namespace  ns3{
                            void  show(){
                                   cout << "this is ns3" << endl; 
                            }
                    }  
             }          
      }
     
     namespace  ns4=ns1::ns2::ns3;  
    
五.c++ 中的结构 联合 枚举
    5.1 结构体
    结构体的定义 和 c中 完全相同
    c++ 中使用结构体 作为类型时 可以省略关键字 struct
    c++ 中的结构体中 是可以定义函数的
    5.2 联合体
    联合体定义  和 c 中完全相同
    c++ 表达联合这个类型时  可以省略关键字 union 
    c++ 中支持匿名联合
    5.3 枚举类型
    c++表达枚举类型时  可以省略关键字 enum 
    可以把枚举赋值给整数  
    整数可不可以赋值给枚举变量(c++中不允许 这里体现了c++
    对类型检查的严格)

六. c++ 中的布尔类型    bool
    取值 有 true  和 false 
    c中需要导入一个头文件 叫 #include <stdbool.h>
    
    定义一个变量  除下面的四个值 之外 结果都是真
    0   '\0'  NULL  false
    有时候用bool类型 表达整数  真就是1  假就是0 
    
七. c++ 的符号替换 
    if(a && b){        if(a and  b){

    }                         }
   
    &&     and
    ||         or
    %:       #

八.c++ 中的函数 
    c++中 函数的参数列表 严格匹配   无参代表没有任何参数
            void  依然可用。
            int    foo(void){    }
            int    foo( ){    }
    c++中 不再支持 函数的隐式声明   调用函数必须前置声明 或者
            定义。
    函数的返回值类型 不能省略   main 函数除外

九. c++ 中的函数重载
    9.1 在同一作用域中  函数名相同 参数列表不同的函数 构成
          重载( overload )关系。
          参数列表不同:参数的个数  类型  顺序 
    9.2  举例
          使用函数指针 调用重载的函数 没有问题
    9.3 函数重载的原理 
          c编译器生成函数调用名时 只考虑函数名
          c++ 编译生成调用函数名时 不但考虑函数名 而且考虑
                 参数列表。
    9.4 解决跨编译器调用的问题
          extern  "C"   int  getmax(int x,int y);
        
   








