一、STL概述
1.标准模板库(Standard Template Library)
1)容器：存储和管理对象的集合。
2)迭代器：在不暴露容器内部表示的前提下，使用户可以一种一致且透明的方式访问容器中的对象。
3)泛型算法：借助于迭代器，以泛型的方式处理容器中的对象。
2.STL的特性
1)STL里的所有组件，都是通过模板定义的，全面支持泛型。
2)STL所追求的目标就在最大程度上降低数据结构和算法与具体数据类型的相关性。
3)STL的设计宗旨就是通过一个尽量小的框架，实现尽量大的弹性。
3.STL的主要容器类型
1)向量(vector)：内存连续，下标访问。
2)列表(list)：内存不连续，不支持下标访问，随机插删高效。
3)双端队列(deque)：类似于向量，但是两端都是开放的。
以上三种容器合称为线性容器，强调元素之间的前后关系。
4)堆栈(stack)：在一端的压入和弹出，后进先出。
5)队列(queue)：从一端压入，从另一端弹出，先进先出。
6)优先队列(priority_queue)：从一端压入，从另一端弹出，优者先出。
以上三种容器合称为适配器容器，构建于三种线性容器之上的封装。
7)映射(map)：通过平衡有序二叉树，存放key-value对的集合，提高搜索性能。key必须唯一，一一对应。
8)多重映射(multimap)：允许key重复的映射。一多对应。
9)集合(set)：没有value的映射。
10)多重集合(multiset)：没有value的多重映射。
以上四种容器合称为关联容器。
4.STL容器的共性
1)所有的容器都支持深拷贝。
2)所有的容器都可以和同型容器做关系比较。
3)容器中的元素都是副本。
4)所有的容器都支持迭代器。
二、向量(vector)
1.基本特性
1)从一段连续的内存空间存放数据。
2)具备常数时间的随机访问特性。
3)支持下标运算符。
4)支持动态内存管理：向量把它所有的元素存放在一个连续的内存块中，这并不会妨碍新元素被无限地插入到容器中。如果当前内存无法满足一个向量中所有元素连续存放的需要，那么这个向量就会自动转移到一个新的内存位置，原先位置上的所有元素都将被复制到新分配的内存中，而原先的内存空间则被释放。
5)通过预分配空间降低动态内存管理的开销。
6)也支持随机位置的插入和删除，但是只有在向量尾部做插入和删除才是高效的。
2.实例化
#include <vector>
1)vector<元素类型> 向量对象;
vector<int> vi;
2)vector<元素类型> 向量对象 (初始大小);
vector<int> vi (10);
初始大小范围内的元素，基本类型，初始化为0，类类型，调用缺省构造函数初始化。
3)vector<元素类型> 向量对象 (初始大小,
  初值);
vector<int> vi (10, 1234);
用初值初始化初始大小范围内的每一个元素。
4)vector<元素类型> 向量对象 (起始迭代器,
  终止迭代器);
用另一个容器从起始迭代器开始，到终止迭代器之前的元素为止的范围内的元素，初始化所构造的向量。
int a[5] = {1, 2, 3, 4, 5};
vector<int> vi (a, a+5);
vector<int> vi (&a[0], &a[5]);
                       &*(a+5)
3.front/back/push_back/pop_back
4.迭代器
1)四个迭代器
iterator/const_iterator/
reverse_iterator/const_reverse_iterator
2)随机迭代器
A.只有连续内存的容器(vector/deque)才有随机迭代器。
B.支持和整数的加减运算，支持迭代器的比较和相减运算。
3)迭代器的分类
按迭代方向分：正向/反向
按访问特性分：可写/只读
按迭代特性分：顺序/随机
vector::iterator - 正向、可写、随机
list::const_reverse_iterator - 反向、只读、顺序
5.insert/erase
6.大小和容量
大小：实际容纳元素的个数。
容量：最多容纳元素的个数。
size - 返回大小
resize - 改变大小，可增可减，增构造，减析构
clear - 清空，等价于resize(0)
empty - 判断是否为空
capacity - 返回容量
reserve - 预留容量，只增不减，新增部分不初始化
class Student {
public:
  Stduent (...) { ... }
private:
  char m_info[1024];
};
class Student {
public:
  Stduent (...) { ... }
private:
//char* m_info;
  string m_info;
};
向量的容量，无论是通过改变元素个数，还是通过直接调用reserve()函数，都是只增加不减少的。因此向量不适宜保存大对象，如果对象需要使用较多的内存资源，建议通过构造和析构函数动态分配和释放该资源。
vector<Student*> vs;
vs.push_back (new Student (...));
QList<QLabel*>
7.查找和排序
#include <algorithm>
iterator find (iterator begin,
  iterator end, const value_type& val);
在begin和end之间查找与val相匹配的第一个元素，返回该元素的迭代器。如果查找失败，返回第二个参数。
void sort (iterator begin, iterator end);
void sort (iterator begin, iterator end,
  less cmp);
所谓比较器，就是一个返回bool类型值，用于判断第一个元素参数是否小于第二个元素参数的函数或函数对象。
bool 比较器函数 (元素类型 const& a,
  元素类型 const& b) {
  如果认为a小于b，则返回true，否则返回false;
}
class 比较器类 {
public:
  bool operator() (元素类型 const& a,
    元素类型 const& b) const {
    如果认为a小于b，则返回true
    否则返回false;
  }
};
sort函数三参数版本的第三个参数，是比较器函数指针，或比较器类对象。
8.类类型的向量
元素类型往往需要考虑以下几个问题：
是否支持深拷贝，拷贝构造和拷贝赋值
是否支持相等性比较，find，“==”或类型转换
是否支持小于运算，sort，小于号或比较器
补充：
size_type string::find_first_of (
  string const& str,
  size_type pos = 0);
返回调用字符串中，从pos处开始的，第一个出现在str字符串中的字符的下标。如果没有出现在str字符串中的字符，则返回string::npos。
string s1 ("hello123world");
string s2 ("0123456789");
s1.find_first_of (s2) -> 5
s1.find_first_of (s2, 6) -> 6
s1.find_first_of (s2, 8) -> string::npos
练习：根据给定的电影票房记录，生成TOP10排行榜，按照票房收入从高到低的顺序打印。
三、字符串(string)
1.源自basic_string<T>模板的类型别名
typedef basic_string<char> string;
typedef basic_string<wchar_t> wstring;
char - 1个字节 - string表示多字节字符串，ASCII/GBK/UTF-8。
wchar_t - 2/4个字节 - wstring表示宽字符字符串，UCS-2/UCS-4。
   A    B    C
---- ---- ----
00XX 00XX 00XX -> 1
2.创建字符串对象
string str;
string str ("");
string str = "";
string str ("Hello, World !");
string str = "Hello, World !";
string str = string ("");
string str = string ("Hello, World !");
string* str = new string;
string* str = new string ();
string* str = new string ("");
string* str = new string ("Hello,World!");
C风格字符串->C++风格字符串
char cstr[] = "Hello, World !";
string cpps (cstr);
string cpps = cstr;
C++风格字符串->C风格字符串
string cpps ("Hello, World !");
char const* cstr = cpps.c_str ();
3.字符串的运算
1)拼接：+
2)赋值：=/+=
3)关系：</<=/>/>=/==/!=，大小写敏感
4)输入/输出：>>/<<，VC6不支持
5)下标：[]
4.大小和容量
size/resize/clear/empty/capacity/reserve
string str ("123456789");
str.length() -> 9
str.size() -> 9
sizeof (str) -> 4/8
strlen (str.c_str ()) -> 9
class Student {
...
private:
//char m_name[256];
  string m_name;
  ...
};
Student stu (...);
ofstream ofs (...);
ofs.write ((char*)&stu, sizeof (stu));
5.拼接、搜索、子串
string& append (const string& str); // +=
string& append (const string& str,
  size_type pos, size_type len);
将str中从第pos个字符开始的len个字符拼接到调用字符串末尾，并返回调用字符串的自引用。
string& append (size_type num, char ch);
在调用字符串的末尾拼接num个ch。
size_type string::find_first_of (
  string const& str,
  size_type pos = 0);
返回调用字符串中，从pos处开始的，第一个出现在str字符串中的字符的下标。如果没有出现在str字符串中的字符，则返回string::npos。
size_type string::find_first_not_of (
  string const& str,
  size_type pos = 0);
返回调用字符串中，从pos处开始的，第一个没有
出现在str字符串中的字符的下标。如果没有这样的字符，则返回string::npos。
size_type string::find_last_of (
  string const& str,
  size_type pos = 0);
返回调用字符串中，从pos处开始的，最后一个出现在str字符串中的字符的下标。如果没有出现在str字符串中的字符，则返回string::npos。
size_type string::find_last_not_of (
  string const& str,
  size_type pos = 0);
返回调用字符串中，从pos处开始的，最后一个没有出现在str字符串中的字符的下标。如果没有这样的字符，则返回string::npos。