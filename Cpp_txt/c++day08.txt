一.虚表
   虚表的类型是一个装有函数地址的数组
   虚表类型实际上 是一个函数的二级指针
   对象中有一个指针 指向虚函数表
   
   /* 把函数指针类型 定义成 FUN */
   typedef   void  (*FUN) (Animal* a,int x);
   /* VTABLE 就是虚表类型 */
   typedef FUN*  VTABLE; 
   Animal   animal;
   VTABLE  vt=*((VTABLE*)&animal);
二.类型识别
   2.1 dynamic_cast<类型>(对象);
   在多态的代码中  父类指针只能调用父类中的相关数据。
   子类扩展的部分无法调用,有时要恢复父类指针 指向的
   具体对象的类型。   
   
   必须满足多态性 (必须有虚函数)
   如果转换成功 返回非空指针
   转换失败 返回NULL 指针
   2.2 typeid  可以返回类型的信息
   typeinfo  
       name()  返回类型的名字
       ==      判断两个typeinfo 是否相等 
       !=      判断两个typeinfo 是否不等
       
    typeid(类型|对象)    
       
三. 虚析构函数
    3.1 在析构函数上加一个 virtual 
    3.2 当父类型的指针 指向子类对象时
        释放这个指针对应的堆内存
        则只有父类的析构函数被调用。子类的析构函数
        不进行调用。
    3.3 当父类中 有虚函数时  应该把父类的析构函数
        定义成 虚析构函数。
        子类 和 父类中 都有自己堆内存 分配时。

四.抽象类
   4.1  不能实例化的类  我们可以把这个类设置成
        抽象类。
   4.2  Animal  animal;
        只要在这个类型中 出现一个纯虚函数 则这个
        类就自动成为抽象类。
        class   Animal{
            public:
            virtual void   show()=0;
        };
        抽象类 除了不能实例化之外 和 其它类没有任何
        区别。
   4.3  纯抽象类
        除了构造 和 析构之外 所有的函数 都是纯虚函数
        则这个类称之为纯抽象类。
        (接口  实现接口)
              
五.c++ 中的 string
   构造函数:
   string()
   string(const string& str)
   string(const char* str)
   
   运算符:
   ==
   !=
   =
   []
   +
   +=
   成员函数:
   length()
   at()
   c_str()
   append()
    
六. 异常 
   6.1 新的错误表达方式
       c 大部分都是通过返回值判断
       c++ 增加了抛出异常的方式
   6.2 举例
       随机数 代表不同的问题
       如果抛出了异常  系统默认的处理是 调用 
       terminate函数。
       也可以对异常 进行异常捕获 然后处理异常
                             
   6.3 如何捕获异常
       try{
           fun();
       }catch(异常类型 e){
        
       }catch(异常类型 e){
       
       }      
   6.4 函数的异常说明
       如果一个函数没有说明任何异常 则这个函数可能会
       抛出任何异常。
       void   funa()throw(int){
       
       }                                       
       void   funb()throw(int,double){
       
       }     
       void   func()throw(int,double,const char*){
       
       }  
             
   6.5 用户自定义 异常 
       用自定义的类表达 不同的错误。          
           
           